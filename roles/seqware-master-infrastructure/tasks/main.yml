---
# file: roles/seqware-master-infrastructure/tasks/main.yml

- name: Setup cloudera preference
  copy:
    src: cloudera.pref
    dest: /etc/apt/preferences.d/cloudera.pref

- name:  Install Hadoop for a master
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  register: oozie_installed
  with_items: 
    - hadoop-0.20-mapreduce-jobtracker
    - hadoop-client
    - hadoop-hdfs-namenode
    - oozie
    - oozie-client
    - hbase
    - hbase-master
    - tree
    - curl
    - attr
    
# at roughly this juncture, we used to install hue
# this is removed since it wasn't used and hue seems unstable in production 
# if you wish to enable it, also see http://thinkingcan.blogspot.ca/2013/09/fixed-importerror-cannot-import-name.html
    
- name: Setting up filesystem limit
  lineinfile:
    dest: /etc/sysctl.conf
    line: 'fs.file-max = 1623050' 
    state: present
    
- name: Setting up soft file limit
  lineinfile:
    dest: /etc/security/limits.conf
    line: '* soft nofile 162305' 
    state: present

- name: Setting up hard file limit
  lineinfile:
    dest: /etc/security/limits.conf
    line: '* hard nofile 162305' 
    state: present

- name: Setting up US locale
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: ^#?AcceptEnv
    line: '#AcceptEnv'
    
- name: locale_gen for US 
  locale_gen: name=en_US.UTF-8 state=present

- name: reconfigure locales
  command: dpkg-reconfigure locales
  register: reconfigure_locales
  changed_when: "'done' in reconfigure_locales"
    
- name:  Install Hadoop for a single-node master
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items: 
    - hadoop-0.20-mapreduce-tasktracker 
    - hadoop-hdfs-datanode
    - hadoop-client
    - hbase-regionserver
  when: single_node

- name:  Install zookeeper
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items: 
    - zookeeper
    - zookeeper-server 

- name:  Initialize zookeeper
  command: service zookeeper-server init creates=/var/lib/zookeeper/version-2

- name:  Start zookeeper
  service: name=zookeeper-server state=started

- name:  Install tomcat
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items: 
    - tomcat7-common
    - tomcat7

- name:  Install apache2
  apt: pkg=apache2 state=present update_cache=yes cache_valid_time=3600

- name: Make sure directory exists
  file: path=/etc/hadoop/conf.my_cluster state=directory

- name:  Copy resources
  template: 
    src: hadoop-files/conf.my_cluster/{{ item }}
    dest: /etc/hadoop/conf.my_cluster/{{ item }}
  with_items:
      - capacity-scheduler.xml
      - hadoop-metrics2.properties  
      - log4j.properties            
      - slaves                  
      - yarn-site.xml
      - configuration.xsl       
      - hadoop-metrics.properties   
      - mapred-queues.xml.template  
      - ssl-client.xml.example
      - container-executor.cfg  
      - hadoop-policy.xml           
      - mapred-site.xml             
      - ssl-server.xml.example
      - core-site.xml           
      - hdfs-site.xml               
      - mapred-site.xml.template    
      - yarn-env.sh

  register: hadoopconfig
  
- name:  Set up Hadoop configuration
  command: 'update-alternatives --install /etc/hadoop/conf hadoop-conf /etc/hadoop/conf.my_cluster 50'
  when: hadoopconfig.changed

- name:  Set up Hadoop configuration
  command: 'update-alternatives --set hadoop-conf /etc/hadoop/conf.my_cluster'
  when: hadoopconfig.changed

- name: Format the namenode
  shell: creates=/usr/lib/hadoop/namenode.formatted su - hdfs -c "hadoop namenode -format" && touch /usr/lib/hadoop/namenode.formatted
  register: namenode_format

- name:  Start HDFS
  service: name=hadoop-hdfs-namenode state=started

- name:  Start HDFS datanode
  service: name=hadoop-hdfs-datanode state=started
  when: single_node
  
- name:  Register HDFS directories
  shell: hadoop fs -ls /tmp/hadoop-mapred/mapred
  register: hdfs_state
  changed_when: False
  ignore_errors: true
  
  #hmmm, no module for hadoop file operations
- name:  Setup HDFS Shared Storage
  sudo: yes
  sudo_user: hdfs
  command: "{{ item }}"
  when: "namenode_format.changed or 'No such file or directory' in hdfs_state.stderr"
  with_items: 
    - hadoop fs -mkdir /tmp
    - hadoop fs -chmod -R 1777 /tmp
    - hadoop fs -mkdir -p /var/lib/hadoop-hdfs/cache/mapred/mapred/staging
    - hadoop fs -chmod 1777 /var/lib/hadoop-hdfs/cache/mapred/mapred/staging
    - hadoop fs -chown -R mapred /var/lib/hadoop-hdfs/cache/mapred
    - hadoop fs -mkdir /tmp/mapred/system
    - hadoop fs -chown mapred:hadoop /tmp/mapred/system
    - hadoop fs -mkdir -p /tmp/hadoop-mapred/mapred
    - hadoop fs -chmod -R a+wrx /tmp/hadoop-mapred/mapred
  
- name:  Start JobTracker
  service: name=hadoop-0.20-mapreduce-jobtracker state=started

- name:  Start TaskTracker
  service: name=hadoop-0.20-mapreduce-tasktracker state=started
  when: single_node

- name:  Make Oozie database user
  sudo_user: postgres
  postgresql_user: user=oozie password=oozie role_attr_flags=NOSUPERUSER,INHERIT,CREATEDB,NOCREATEROLE state=present encrypted=yes
  
- name:  Make Oozie database in postgres
  sudo_user: postgres
  postgresql_db: db=oozie owner=oozie encoding='UTF-8' lc_collate='en_US.UTF-8' lc_ctype='en_US.UTF-8'  state=present template='template0'
  
  # TODO: make this idempotent by using proper file modules 
- name:  Oozie 
  when: oozie_installed.changed
  notify: restart oozie
  command: "{{ item }}"
  with_items:
    - wget -q http://archive.cloudera.com/gplextras/misc/ext-2.2.zip
    - unzip ext-2.2.zip
    - mv ext-2.2 /var/lib/oozie/
    
- name:  Oozie started for variable registration 
  service: name=oozie state=started

- name:  Register Oozie SGE Home Dir
  shell: 'ps -fww -u oozie | grep -oE "\-Doozie\.home\.dir=\S+" | grep -oE "/\S+"'
  register: oozie_home_dir
  changed_when: False
  
- name:  Register Oozie SGE Conf Dir
  shell: 'ps -fww -u oozie | grep -oE "\-Doozie\.config\.dir=\S+" | grep -oE "/\S+"'
  register: oozie_conf_dir
  changed_when: False

- name:  Register qsub path
  command: which qsub
  register: qsub_path
  changed_when: False
  
- name:  Copy Oozie Config
  copy: 
    src: oozie-site.xml
    dest: '{{ oozie_conf_dir.stdout }}/oozie-site.xml'
  notify: restart oozie
  
- name: Copy Oozie Env (Set memory)
  copy:
    src: oozie-env.sh
    dest: '{{ oozie_conf_dir.stdout }}/oozie-env.sh'
  notify: restart oozie
  
- name: Copy Oozie Log4j
  copy:
    src: oozie-log4j.properties
    dest: '{{ oozie_conf_dir.stdout }}/oozie-log4j.properties'
  notify: restart oozie
  
  # need to figure out how to refactor this cleanly
- name:  Register oozie database relations
  shell: psql -U oozie --command "\dt"
  register: oozie_database_state
  changed_when: False

# will need to parameterize this if we ever want the webservice to be on a different host
- name: create database for oozie
  when: "oozie_database_state.stdout.find('No relations found.') != -1"
  shell: sudo -u oozie /usr/lib/oozie/bin/ooziedb.sh create -run

- name:  Create Oozie web dir
  file: state=directory path={{ oozie_home_dir.stdout }}/webapps/oozie/WEB-INF/lib 
  
- name:  Download Oozie-SGE 
  get_url: url={{ item.url }} dest={{ oozie_home_dir.stdout }}/webapps/oozie/WEB-INF/lib mode=0555
  with_items:
     - { url: 'http://wrench.res.oicr.on.ca/artifactory/seqware-dependencies/io/seqware/oozie-sge/1.0.2/oozie-sge-1.0.2.jar' }
     - { url: 'http://repo1.maven.org/maven2/org/apache/commons/commons-exec/1.1/commons-exec-1.1.jar' }
  notify: restart oozie

- name:  Oozie SGE Logging
  lineinfile: 
    dest: '{{ oozie_conf_dir.stdout }}/oozie-log4j.properties'
    create: no
    line: log4j.logger.io.seqware.oozie.action.sge=DEBUG, oozie
    state: present
    insertafter: EOF
  notify: restart oozie
  
- name:  Oozie Sudoers
  lineinfile: 
    dest: /etc/sudoers
    create: no
    line: "{{ item }}"
    state: present
    insertafter: EOF
    validate: visudo -cf %s
  with_items: 
      - "oozie ALL=(ALL) NOPASSWD: {{ qsub_path.stdout  }}"
      - "oozie ALL=(ALL) NOPASSWD: ALL"
      - "seqware ALL=(ALL) NOPASSWD: ALL"
  notify: restart oozie
  
- name:  Setup daemons to start on boot
  service: name={{ item }} state=started enabled=yes
  with_items: 
    - apache2
    - cron
    - hadoop-hdfs-namenode
    - hadoop-0.20-mapreduce-jobtracker
    - oozie
    - postgresql

- name:  Setup single-node daemons to start on boot
  service: name={{ item }} state=started enabled=yes
  with_items: 
    - hadoop-hdfs-datanode
    - hadoop-0.20-mapreduce-tasktracker
  when: single_node == True
  
- name:  Install NFS
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items: 
    - rpcbind
    - nfs-kernel-server
  
- name:  Template NFS exports
  template: src=exports.j2 dest=/etc/exports
  register: nfs_setup

- name:  Setup NFS
  sudo: yes
  command: exportfs -ra
  when: nfs_setup.changed
  
- name:  NFS Restart
  service: name=rpcbind state=restarted
  when: nfs_setup.changed
  ignore_errors: yes
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'trusty'

- name:  NFS Restart
  service: name=portmap state=restarted
  when: nfs_setup.changed
  ignore_errors: yes
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'precise'
  
- name:  NFS Restart
  service: name=nfs-kernel-server state=restarted
  when: nfs_setup.changed

- name:  Template init script
  template: src=hadoop-init-master.j2 dest=/etc/init.d/hadoop-init
    
- name:  Set up init script permissions
  file: path=/etc/init.d/hadoop-init owner=root group=root mode=0755

- name:  Setup init script for boot
  service: name=hadoop-init enabled=yes

